
import { useState, useRef, useEffect } from 'react';
import { format } from 'date-fns';
import { useToast } from "@/components/ui/use-toast";

interface JournalEntry {
  id: string;
  title: string;
  date: string;
  audio: string;
  transcription: string;
}

export const useAudioJournal = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const [audioURL, setAudioURL] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [transcription, setTranscription] = useState("");
  const [title, setTitle] = useState(format(new Date(), "MMMM d, yyyy"));
  const [entries, setEntries] = useState<JournalEntry[]>([]);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const audioPlayerRef = useRef<HTMLAudioElement | null>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const { toast } = useToast();
  
  useEffect(() => {
    // Load saved entries from localStorage
    const savedEntries = localStorage.getItem('audioJournalEntries');
    if (savedEntries) {
      setEntries(JSON.parse(savedEntries));
    }
  }, []);
  
  useEffect(() => {
    return () => {
      // Cleanup timer on component unmount
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      
      // Cleanup audio URL
      if (audioURL) {
        URL.revokeObjectURL(audioURL);
      }
    };
  }, [audioURL]);
  
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      
      // Reset state
      setAudioBlob(null);
      setAudioURL(null);
      setTranscription("");
      setRecordingTime(0);
      audioChunksRef.current = [];
      
      // Start recording
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        const audioUrl = URL.createObjectURL(audioBlob);
        
        setAudioBlob(audioBlob);
        setAudioURL(audioUrl);
        setIsRecording(false);
        
        // Simulate transcription (in a real app, you would send this to a speech-to-text API)
        setTimeout(() => {
          setTranscription("This is a simulated transcription of your audio recording. In a real application, this text would be generated by sending your audio to a speech-to-text API like Google Cloud Speech-to-Text, Azure Speech Services, or similar services.");
        }, 1000);
        
        // Stop all tracks in the stream
        stream.getTracks().forEach(track => track.stop());
      };
      
      // Start timer
      timerRef.current = setInterval(() => {
        setRecordingTime(prevTime => prevTime + 1);
      }, 1000);
      
      // Start recording
      mediaRecorder.start();
      setIsRecording(true);
      
      toast({
        title: "Recording started",
        description: "Your audio journal entry is now being recorded.",
      });
      
    } catch (error) {
      console.error("Error accessing microphone:", error);
      toast({
        variant: "destructive",
        title: "Microphone access denied",
        description: "Please allow microphone access to record your journal entry.",
      });
    }
  };
  
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      
      // Clear timer
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      
      toast({
        title: "Recording completed",
        description: "Your audio has been captured successfully.",
      });
    }
  };
  
  const togglePlayback = () => {
    if (!audioPlayerRef.current || !audioURL) return;
    
    if (isPlaying) {
      audioPlayerRef.current.pause();
    } else {
      audioPlayerRef.current.play();
    }
    
    setIsPlaying(!isPlaying);
  };
  
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };
  
  const saveEntry = () => {
    if (!audioURL || !title) return;
    
    const newEntry = {
      id: Date.now().toString(),
      title,
      date: format(new Date(), "PPP"),
      audio: audioURL,
      transcription: transcription || "No transcription available"
    };
    
    const updatedEntries = [...entries, newEntry];
    setEntries(updatedEntries);
    
    // Save to localStorage
    localStorage.setItem('audioJournalEntries', JSON.stringify(updatedEntries));
    
    // Reset state
    setAudioBlob(null);
    setAudioURL(null);
    setTranscription("");
    setTitle(format(new Date(), "MMMM d, yyyy"));
    
    toast({
      title: "Entry saved",
      description: "Your audio journal entry has been saved successfully.",
    });
  };
  
  const discardRecording = () => {
    if (audioURL) {
      URL.revokeObjectURL(audioURL);
    }
    
    setAudioBlob(null);
    setAudioURL(null);
    setTranscription("");
    setRecordingTime(0);
    
    toast({
      title: "Recording discarded",
      description: "Your audio recording has been discarded.",
    });
  };

  return {
    isRecording,
    recordingTime,
    audioBlob,
    audioURL,
    isPlaying,
    transcription,
    title,
    entries,
    audioPlayerRef,
    setTitle,
    setTranscription,
    startRecording,
    stopRecording,
    togglePlayback,
    formatTime,
    saveEntry,
    discardRecording
  };
};
