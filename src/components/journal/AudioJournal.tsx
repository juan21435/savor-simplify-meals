
import React, { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import { Mic, MicOff, Play, Pause, Save, Trash } from 'lucide-react';
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { format } from 'date-fns';
import { useToast } from "@/components/ui/use-toast";

const AudioJournal = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const [audioURL, setAudioURL] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [transcription, setTranscription] = useState("");
  const [title, setTitle] = useState(format(new Date(), "MMMM d, yyyy"));
  const [entries, setEntries] = useState<{id: string, title: string, date: string, audio: string, transcription: string}[]>([]);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const audioPlayerRef = useRef<HTMLAudioElement | null>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const { toast } = useToast();
  
  useEffect(() => {
    // Load saved entries from localStorage
    const savedEntries = localStorage.getItem('audioJournalEntries');
    if (savedEntries) {
      setEntries(JSON.parse(savedEntries));
    }
  }, []);
  
  useEffect(() => {
    return () => {
      // Cleanup timer on component unmount
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      
      // Cleanup audio URL
      if (audioURL) {
        URL.revokeObjectURL(audioURL);
      }
    };
  }, [audioURL]);
  
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      
      // Reset state
      setAudioBlob(null);
      setAudioURL(null);
      setTranscription("");
      setRecordingTime(0);
      audioChunksRef.current = [];
      
      // Start recording
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        const audioUrl = URL.createObjectURL(audioBlob);
        
        setAudioBlob(audioBlob);
        setAudioURL(audioUrl);
        setIsRecording(false);
        
        // Simulate transcription (in a real app, you would send this to a speech-to-text API)
        setTimeout(() => {
          setTranscription("This is a simulated transcription of your audio recording. In a real application, this text would be generated by sending your audio to a speech-to-text API like Google Cloud Speech-to-Text, Azure Speech Services, or similar services.");
        }, 1000);
        
        // Stop all tracks in the stream
        stream.getTracks().forEach(track => track.stop());
      };
      
      // Start timer
      timerRef.current = setInterval(() => {
        setRecordingTime(prevTime => prevTime + 1);
      }, 1000);
      
      // Start recording
      mediaRecorder.start();
      setIsRecording(true);
      
      toast({
        title: "Recording started",
        description: "Your audio journal entry is now being recorded.",
      });
      
    } catch (error) {
      console.error("Error accessing microphone:", error);
      toast({
        variant: "destructive",
        title: "Microphone access denied",
        description: "Please allow microphone access to record your journal entry.",
      });
    }
  };
  
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      
      // Clear timer
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      
      toast({
        title: "Recording completed",
        description: "Your audio has been captured successfully.",
      });
    }
  };
  
  const togglePlayback = () => {
    if (!audioPlayerRef.current || !audioURL) return;
    
    if (isPlaying) {
      audioPlayerRef.current.pause();
    } else {
      audioPlayerRef.current.play();
    }
    
    setIsPlaying(!isPlaying);
  };
  
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };
  
  const saveEntry = () => {
    if (!audioURL || !title) return;
    
    const newEntry = {
      id: Date.now().toString(),
      title,
      date: format(new Date(), "PPP"),
      audio: audioURL,
      transcription: transcription || "No transcription available"
    };
    
    const updatedEntries = [...entries, newEntry];
    setEntries(updatedEntries);
    
    // Save to localStorage
    localStorage.setItem('audioJournalEntries', JSON.stringify(updatedEntries));
    
    // Reset state
    setAudioBlob(null);
    setAudioURL(null);
    setTranscription("");
    setTitle(format(new Date(), "MMMM d, yyyy"));
    
    toast({
      title: "Entry saved",
      description: "Your audio journal entry has been saved successfully.",
    });
  };
  
  const discardRecording = () => {
    if (audioURL) {
      URL.revokeObjectURL(audioURL);
    }
    
    setAudioBlob(null);
    setAudioURL(null);
    setTranscription("");
    setRecordingTime(0);
    
    toast({
      title: "Recording discarded",
      description: "Your audio recording has been discarded.",
    });
  };
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <Card className="h-full">
          <CardHeader>
            <CardTitle>Record Your Thoughts</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col gap-4">
            <div className="mb-4">
              <Label htmlFor="entry-title">Entry Title</Label>
              <Input 
                id="entry-title" 
                value={title} 
                onChange={(e) => setTitle(e.target.value)} 
                placeholder="Give your entry a title"
                disabled={isRecording}
              />
            </div>
            
            <div className="flex flex-col items-center gap-4">
              {isRecording ? (
                <div className="flex flex-col items-center gap-2">
                  <div className="text-2xl font-mono">{formatTime(recordingTime)}</div>
                  <div className="animate-pulse text-destructive">‚óè Recording</div>
                </div>
              ) : audioURL ? (
                <div className="w-full">
                  <audio ref={audioPlayerRef} src={audioURL} onEnded={() => setIsPlaying(false)} />
                  <div className="flex items-center justify-center gap-2 mb-4">
                    <Button variant="outline" size="sm" onClick={togglePlayback}>
                      {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                      {isPlaying ? "Pause" : "Play"}
                    </Button>
                  </div>
                </div>
              ) : null}
              
              <Button
                variant={isRecording ? "destructive" : "default"}
                size="lg"
                className="rounded-full w-16 h-16 flex items-center justify-center"
                onClick={isRecording ? stopRecording : startRecording}
              >
                {isRecording ? (
                  <MicOff className="h-6 w-6" />
                ) : (
                  <Mic className="h-6 w-6" />
                )}
              </Button>
              
              <div className="text-center text-sm text-muted-foreground">
                {isRecording 
                  ? "Click to stop recording" 
                  : audioURL 
                    ? "Recording complete" 
                    : "Click to start recording"}
              </div>
            </div>
          </CardContent>
          
          {audioURL && (
            <CardFooter className="flex justify-end gap-2">
              <Button variant="outline" onClick={discardRecording}>
                <Trash className="h-4 w-4 mr-2" />
                Discard
              </Button>
              <Button onClick={saveEntry}>
                <Save className="h-4 w-4 mr-2" />
                Save Entry
              </Button>
            </CardFooter>
          )}
        </Card>
      </div>
      
      <div>
        <Card className="h-full">
          <CardHeader>
            <CardTitle>Transcription</CardTitle>
          </CardHeader>
          <CardContent>
            {audioURL ? (
              <>
                {transcription ? (
                  <Textarea
                    className="h-64 resize-none"
                    value={transcription}
                    onChange={(e) => setTranscription(e.target.value)}
                    placeholder="Transcription will appear here..."
                  />
                ) : (
                  <div className="flex items-center justify-center h-64 border rounded-md bg-muted/10">
                    <div className="text-center animate-pulse">Generating transcription...</div>
                  </div>
                )}
              </>
            ) : (
              <div className="flex items-center justify-center h-64 border rounded-md bg-muted/10">
                <div className="text-center text-muted-foreground">
                  Record your thoughts to see the transcription here
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
      
      <div className="md:col-span-2">
        <h3 className="text-lg font-medium mb-4">Previous Entries</h3>
        {entries.length === 0 ? (
          <div className="text-center py-8 border rounded-md bg-muted/10">
            <p className="text-muted-foreground">No entries yet. Start by recording your first audio journal.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {entries.map((entry) => (
              <Card key={entry.id}>
                <CardHeader>
                  <CardTitle>{entry.title}</CardTitle>
                  <p className="text-sm text-muted-foreground">{entry.date}</p>
                </CardHeader>
                <CardContent>
                  <p className="line-clamp-3 text-sm">{entry.transcription}</p>
                </CardContent>
                <CardFooter>
                  <audio controls src={entry.audio} className="w-full" />
                </CardFooter>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AudioJournal;
